Интервал и типы с условиями
----------------------------


В данной работе использовалась теория типов, отличающаяся от
описанной ранее, но позволяющая работать с теми же типами,
что и стандартная теория типов (включая высшие индуктивные
типы). Формализованные утверждения записаны на языке hoq[@hoqGitHub],
реализующем эту теорию типов. Подробное описание языка можно найти
в статье, посвященной теории типов с интервалом и условиями[@hoqDoc].

Основное отличие этой теории типов заключается в том, как определяется
тип путей. А именно, вместо примитивного типа путей со своими правилами
типизации, конструктором и элиминатором, в теорию добавляется
тип интервала `I` с конструкторами `left : I` и `right : I`,
а также элиминатором `coe`:

~~~~
coe : (X : I -> Type) -> (i j : I) -> X i -> X j
~~~~

Теперь путь из точки `a` в точку `b` в типе `X` можно определить как
отображение из интервала в `X`, удовлетворяющее двум условиям:
левую точку интервала оно отображает в `a`, а правую — в `b`.

Для описания ограничений такого рода теория поддерживает два расширения:

* типы данных (`data`) с условиями,
* записи (`record`) с условиями.

Условия позволяют _вычислительно_ отождествить некоторые точки в типе.
Таким образом можно определить тип путей из `a` в `b` как запись,
состоящую из отображения с необходимыми условиями (\inlref{листинг}{lst:path-type}).
Это определение можно обобщить до типа _зависимых_ путей (\inlref{листинг}{lst:path-dep-type}).
В [@hoqDoc] показано, что для определенного таким образом типа путей выполняется
аксиома J.

~~~~{label=lst:path-type float=ht caption="Тип путей"}
record Path' (A : Type) (a : A) (b : A) where
    constructor path'
    at : (i : I) -> A
  with
    at left  = a
    at right = b
~~~~

~~~~{label=lst:path-dep-type float=ht caption="Тип зависимых путей"}
record Path (A : I -> Type) (a : A left) (b : A right) where
    constructor path
    at : (i : I) -> A i
  with
    at left  = a
    at right = b
~~~~
