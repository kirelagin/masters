Разбиение на произвольное число поверхностей
---------------------------------------------


Для начала вспомним, что мы накладывали на отображения, задающие
эквивалентность, дополнительное условие: они оба должны были
отображать границу на границу. Для чего это было нужно?

Во-первых, так мы гарантируем, что описанный метод останется полезен,
если границу куба каким-то образом склеить. Например, в случае с типом `I1`,
мы можем, добавив условий к определению типа, приклеить оба конца отрезка
к точке и получить таким образом окружность. То же самое можно сделать
с типом `I3`, соединив точки `a` и `d` в одну, и получив в результате треугольник.
При этом доказательство эквивалентности останется, по сути своей, прежним.

Второе, для чего это условие необходимо, это работа с типами, содержащими
большее или меньшее число отрезков. В случае открытого $n$-короба, мы можем склеить
$(2n+1)$ грань в один $n$-куб, но что делать, если тип состоит из _меньшего_ числа кубов?
В этом случае всё предельно просто: достаточно представить, что кубов ровно нужное
число, просто некоторые из них тривиальные.

В случае же, когда кубов _больше_, чем надо, самый простой способ — действовать
поэтапно, склеивая кубы по очереди и доказывая промежуточные эквивалентности.
В качестве примера докажем, что граница квадрата эквивалентна сфере.

Границу квадрата определим следующим образом:

~~~~
data Sq = a | b | c | d | bc I | ba I | cd I | ad I
  with
    bc left  = b
    bc right = c
    ba left  = b
    ba right = a
    cd left  = c
    cd right = d
    ad left  = a
    ad right = d
~~~~

Она состоит из четырех точек и четырех отрезков между ними.
Окружность же будет состоять из одной точки и одной петли:

~~~~
data S1 = base | loop I
  with
    loop left  = base
    loop right = base
~~~~

В поверхности квадрата имеются четыре отрезка, а в окружности
— только один. Поскольку случай одномерный, за один раз мы можем
склеить три отрезка в один, что меньше, чем надо.
Потому введем промежуточный тип, состоящий из двух точек и двух отрезков:

~~~~
data El = s | t | st1 I | st2 I
  with
    st1 left  = s
    st1 right = t
    st2 left  = s
    st2 right = t
~~~~

Теперь нам предстоит доказать две эквивалентности (между `Sq` и `El`, а
также между `El` и `S1`), а затем воспользоваться транзитивностью эквивалентности.

Отображения между `Sq` и `El` будут состоять из двух независимых «компонент»:

* Отрезку `st1` сопоставляется конкатенация `ab`, `bc` и `cd` и наоборот.
* Отрезку `st2` сопоставляется отрезок `ad` и наоборот.

Доказательства гопотопности точно так же делятся на две независмые «компоненты»
каждое: для точек из `ab`, `bc` и `cd`, а также `st1` это точно такое же
доказательство как было с `I1` и `I3`; для точек же из `ac` и `st2` доказательство
тривиально, поскольку все эти точки переходят сами в себя.

В \inlref{листинге}{lst:sq-el} приведены определения отображений и
полное доказательство эквивалентности.

~~~~{label=lst:sq-el float=ht caption="Эквивалентность \lstinline{Sq} и \lstinline{El}"}
f2 : Sq -> El
f2 a      = s
f2 (ba _) = s
f2 b      = s
f2 (bc j) = st1 j
f2 c      = t
f2 (cd _) = t
f2 d      = t
f2 (ad j) = st2 j

g2 : El -> Sq
g2 s       = a
g2 (st1 j) = fill-2 (\_ _ -> Sq)
                    (box-1 b c a d (path ba) (path cd) (path bc))
                    right j
g2 (st2 j) = ad j
g2 t       = d

g2-then-f2 : (x : El) -> x = f2 (g2 x)
g2-then-f2 s       = idp
g2-then-f2 (st1 j) =
  path (\i -> f2 (fill-2 (\_ _ -> Sq)
                         (box-1 b c a d (path ba) (path cd) (path bc))
                         i j))
g2-then-f2 (st2 _) = idp
g2-then-f2 t       = idp

f2-then-g2 : (x : Sq) -> x = g2 (f2 x)
f2-then-g2 a      = idp
f2-then-g2 (ba j) = ptrim' (path ba) j
f2-then-g2 b      = path ba
f2-then-g2 (bc j) =
  path (\i -> (fill-2 (\_ _ -> Sq)
                      (box-1 b c a d (path ba) (path cd) (path bc))
                      i j))
f2-then-g2 c      = path cd
f2-then-g2 (cd j) = ptrim' (path cd) j
f2-then-g2 d      = idp
f2-then-g2 (ad _) = idp
~~~~

Следующий шаг — эквивалентность `El` и `S1`. Здесь ситуация противоположная,
путей, наоборот, на один меньше, чем надо. Как уже говорилось, это просто
частный случай, когда один из путей тривиален.

Нужным образом модифицированное доказательство утверждения про `I1` и `I3`
приведено в \inlref{листинге}{lst:el-s1}.

~~~~{label=lst:el-s1 float=ht caption="Эквивалентность \lstinline{El} и \lstinline{S1}"}
f1 : El -> S1
f1 s       = base
f1 (st1 _) = base
f1 (st2 j) = loop j
f1 t       = base

g1 : S1 -> El
g1 base     = t
g1 (loop j) = fill-2 (\_ _ -> El)
                     (box-1 s t t t (path st1) idp (path st2))
                     right j

g1-then-f1 : (x : S1) -> x = f1 (g1 x)
g1-then-f1 base     = idp
g1-then-f1 (loop j) =
  path (\i -> f1 (fill-2 (\_ _ -> El)
                 (box-1 s t t t (path st1) idp (path st2)) i j))

f1-then-g1 : (x : El) -> x = g1 (f1 x)
f1-then-g1 s       = path st1
f1-then-g1 (st1 j) = ptrim' (path st1) j
f1-then-g1 (st2 j) =
  path (\i -> (fill-2 (\_ _ -> El)
                      (box-1 s t t t (path st1) idp (path st2))
                      i j))
f1-then-g1 t       = idp
~~~~

Комбинируя эти идеи, получаем возможность доказывать утверждения
об эквивалентности для типов, склеенных из произвольного числа поверхностей
произвольной размерности.
